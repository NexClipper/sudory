// Code generated by Ice-cream-maker DO NOT EDIT.
package v3
 
func (ManagedChannel) ColumnNames() []string {
	return []string{
 		"uuid",
 		"name",
 		"summary",
 		"event_category",
 		"created",
 		"updated",
 		"deleted",
	}
}
 
func (NotifierEdge) ColumnNames() []string {
	return []string{
 		"uuid",
 		"notifier_type",
	}
}
 
func (NotifierEdge_property) ColumnNames() []string {
	return []string{
 		"notifier_type",
	}
}
 
func (NotifierConsole) ColumnNames() []string {
	return []string{
 		"uuid",
	}
}
 
func (NotifierWebhook) ColumnNames() []string {
	return []string{
 		"uuid",
 		"method",
 		"url",
 		"request_headers",
 		"request_timeout",
	}
}
 
func (WebhookConfig) ColumnNames() []string {
	return []string{
 		"method",
 		"url",
 		"request_headers",
 		"request_timeout",
	}
}
 
func (NotifierRabbitMq) ColumnNames() []string {
	return []string{
 		"uuid",
 		"url",
 		"exchange",
 		"routing_key",
 		"mandatory",
 		"immediate",
 		"message_headers",
 		"message_content_type",
 		"message_content_encoding",
 		"message_delivery_mode",
 		"message_priority",
 		"message_correlation_id",
 		"message_reply_to",
 		"message_expiration",
 		"message_message_id",
 		"message_timestamp",
 		"message_type",
 		"message_user_id",
 		"message_app_id",
	}
}
 
func (RabbitMqConfig) ColumnNames() []string {
	return []string{
 		"url",
 		"exchange",
 		"routing_key",
 		"mandatory",
 		"immediate",
 		"message_headers",
 		"message_content_type",
 		"message_content_encoding",
 		"message_delivery_mode",
 		"message_priority",
 		"message_correlation_id",
 		"message_reply_to",
 		"message_expiration",
 		"message_message_id",
 		"message_timestamp",
 		"message_type",
 		"message_user_id",
 		"message_app_id",
	}
}
 
func (NotifierSlackhook) ColumnNames() []string {
	return []string{
 		"uuid",
 		"url",
 		"request_timeout",
	}
}
 
func (SlackhookConfig) ColumnNames() []string {
	return []string{
 		"url",
 		"request_timeout",
	}
}
 
func (ChannelStatusOption_property) ColumnNames() []string {
	return []string{
 		"status_max_count",
	}
}
 
func (ChannelStatusOption) ColumnNames() []string {
	return []string{
 		"uuid",
 		"status_max_count",
	}
}
 
func (ChannelStatus) ColumnNames() []string {
	return []string{
 		"uuid",
 		"created",
 		"message",
	}
}
 
func (Filter) ColumnNames() []string {
	return []string{
 		"uuid",
 		"filter_op",
 		"filter_key",
 		"filter_value",
	}
}
 
func (Format_property) ColumnNames() []string {
	return []string{
 		"format_type",
 		"format_data",
	}
}
 
func (Format) ColumnNames() []string {
	return []string{
 		"uuid",
 		"format_type",
 		"format_data",
	}
}
 
func (row ManagedChannel) Values() []interface{} {
	return []interface{}{
		row.Uuid,
		row.Name,
		row.Summary,
		row.EventCategory,
		row.Created,
		row.Updated,
		row.Deleted,
	}
}
 
func (row NotifierEdge) Values() []interface{} {
	return []interface{}{
		row.Uuid,
		row.NotifierType,
	}
}
 
func (row NotifierEdge_property) Values() []interface{} {
	return []interface{}{
		row.NotifierType,
	}
}
 
func (row NotifierConsole) Values() []interface{} {
	return []interface{}{
		row.Uuid,
	}
}
 
func (row NotifierWebhook) Values() []interface{} {
	return []interface{}{
		row.Uuid,
		row.Method,
		row.Url,
		row.RequestHeaders,
		row.RequestTimeout,
	}
}
 
func (row WebhookConfig) Values() []interface{} {
	return []interface{}{
		row.Method,
		row.Url,
		row.RequestHeaders,
		row.RequestTimeout,
	}
}
 
func (row NotifierRabbitMq) Values() []interface{} {
	return []interface{}{
		row.Uuid,
		row.Url,
		row.ChannelPublish.Exchange,
		row.ChannelPublish.RoutingKey,
		row.ChannelPublish.Mandatory,
		row.ChannelPublish.Immediate,
		row.Publishing.MessageHeaders,
		row.Publishing.MessageContentType,
		row.Publishing.MessageContentEncoding,
		row.Publishing.MessageDeliveryMode,
		row.Publishing.MessagePriority,
		row.Publishing.MessageCorrelationId,
		row.Publishing.MessageReplyTo,
		row.Publishing.MessageExpiration,
		row.Publishing.MessageMessageId,
		row.Publishing.MessageTimestamp,
		row.Publishing.MessageType,
		row.Publishing.MessageUserId,
		row.Publishing.MessageAppId,
	}
}
 
func (row RabbitMqConfig) Values() []interface{} {
	return []interface{}{
		row.Url,
		row.ChannelPublish.Exchange,
		row.ChannelPublish.RoutingKey,
		row.ChannelPublish.Mandatory,
		row.ChannelPublish.Immediate,
		row.Publishing.MessageHeaders,
		row.Publishing.MessageContentType,
		row.Publishing.MessageContentEncoding,
		row.Publishing.MessageDeliveryMode,
		row.Publishing.MessagePriority,
		row.Publishing.MessageCorrelationId,
		row.Publishing.MessageReplyTo,
		row.Publishing.MessageExpiration,
		row.Publishing.MessageMessageId,
		row.Publishing.MessageTimestamp,
		row.Publishing.MessageType,
		row.Publishing.MessageUserId,
		row.Publishing.MessageAppId,
	}
}
 
func (row NotifierSlackhook) Values() []interface{} {
	return []interface{}{
		row.Uuid,
		row.Url,
		row.RequestTimeout,
	}
}
 
func (row SlackhookConfig) Values() []interface{} {
	return []interface{}{
		row.Url,
		row.RequestTimeout,
	}
}
 
func (row ChannelStatusOption_property) Values() []interface{} {
	return []interface{}{
		row.StatusMaxCount,
	}
}
 
func (row ChannelStatusOption) Values() []interface{} {
	return []interface{}{
		row.Uuid,
		row.StatusMaxCount,
	}
}
 
func (row ChannelStatus) Values() []interface{} {
	return []interface{}{
		row.Uuid,
		row.Created,
		row.Message,
	}
}
 
func (row Filter) Values() []interface{} {
	return []interface{}{
		row.Uuid,
		row.FilterOp,
		row.FilterKey,
		row.FilterValue,
	}
}
 
func (row Format_property) Values() []interface{} {
	return []interface{}{
		row.FormatType,
		row.FormatData,
	}
}
 
func (row Format) Values() []interface{} {
	return []interface{}{
		row.Uuid,
		row.FormatType,
		row.FormatData,
	}
}

type Scanner interface {
	Scan(dest ...interface{}) error
}
 
func (row *ManagedChannel) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.Uuid,
		&row.Name,
		&row.Summary,
		&row.EventCategory,
		&row.Created,
		&row.Updated,
		&row.Deleted,
	)
}
 
func (row *NotifierEdge) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.Uuid,
		&row.NotifierType,
	)
}
 
func (row *NotifierEdge_property) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.NotifierType,
	)
}
 
func (row *NotifierConsole) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.Uuid,
	)
}
 
func (row *NotifierWebhook) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.Uuid,
		&row.Method,
		&row.Url,
		&row.RequestHeaders,
		&row.RequestTimeout,
	)
}
 
func (row *WebhookConfig) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.Method,
		&row.Url,
		&row.RequestHeaders,
		&row.RequestTimeout,
	)
}
 
func (row *NotifierRabbitMq) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.Uuid,
		&row.Url,
		&row.ChannelPublish.Exchange,
		&row.ChannelPublish.RoutingKey,
		&row.ChannelPublish.Mandatory,
		&row.ChannelPublish.Immediate,
		&row.Publishing.MessageHeaders,
		&row.Publishing.MessageContentType,
		&row.Publishing.MessageContentEncoding,
		&row.Publishing.MessageDeliveryMode,
		&row.Publishing.MessagePriority,
		&row.Publishing.MessageCorrelationId,
		&row.Publishing.MessageReplyTo,
		&row.Publishing.MessageExpiration,
		&row.Publishing.MessageMessageId,
		&row.Publishing.MessageTimestamp,
		&row.Publishing.MessageType,
		&row.Publishing.MessageUserId,
		&row.Publishing.MessageAppId,
	)
}
 
func (row *RabbitMqConfig) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.Url,
		&row.ChannelPublish.Exchange,
		&row.ChannelPublish.RoutingKey,
		&row.ChannelPublish.Mandatory,
		&row.ChannelPublish.Immediate,
		&row.Publishing.MessageHeaders,
		&row.Publishing.MessageContentType,
		&row.Publishing.MessageContentEncoding,
		&row.Publishing.MessageDeliveryMode,
		&row.Publishing.MessagePriority,
		&row.Publishing.MessageCorrelationId,
		&row.Publishing.MessageReplyTo,
		&row.Publishing.MessageExpiration,
		&row.Publishing.MessageMessageId,
		&row.Publishing.MessageTimestamp,
		&row.Publishing.MessageType,
		&row.Publishing.MessageUserId,
		&row.Publishing.MessageAppId,
	)
}
 
func (row *NotifierSlackhook) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.Uuid,
		&row.Url,
		&row.RequestTimeout,
	)
}
 
func (row *SlackhookConfig) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.Url,
		&row.RequestTimeout,
	)
}
 
func (row *ChannelStatusOption_property) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.StatusMaxCount,
	)
}
 
func (row *ChannelStatusOption) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.Uuid,
		&row.StatusMaxCount,
	)
}
 
func (row *ChannelStatus) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.Uuid,
		&row.Created,
		&row.Message,
	)
}
 
func (row *Filter) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.Uuid,
		&row.FilterOp,
		&row.FilterKey,
		&row.FilterValue,
	)
}
 
func (row *Format_property) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.FormatType,
		&row.FormatData,
	)
}
 
func (row *Format) Scan(scanner Scanner) error {
	return scanner.Scan(
		&row.Uuid,
		&row.FormatType,
		&row.FormatData,
	)
}
 
func (row *ManagedChannel) Ptrs() []interface{} {
	return []interface{}{
		&row.Uuid,
		&row.Name,
		&row.Summary,
		&row.EventCategory,
		&row.Created,
		&row.Updated,
		&row.Deleted,
	}
}
 
func (row *NotifierEdge) Ptrs() []interface{} {
	return []interface{}{
		&row.Uuid,
		&row.NotifierType,
	}
}
 
func (row *NotifierEdge_property) Ptrs() []interface{} {
	return []interface{}{
		&row.NotifierType,
	}
}
 
func (row *NotifierConsole) Ptrs() []interface{} {
	return []interface{}{
		&row.Uuid,
	}
}
 
func (row *NotifierWebhook) Ptrs() []interface{} {
	return []interface{}{
		&row.Uuid,
		&row.Method,
		&row.Url,
		&row.RequestHeaders,
		&row.RequestTimeout,
	}
}
 
func (row *WebhookConfig) Ptrs() []interface{} {
	return []interface{}{
		&row.Method,
		&row.Url,
		&row.RequestHeaders,
		&row.RequestTimeout,
	}
}
 
func (row *NotifierRabbitMq) Ptrs() []interface{} {
	return []interface{}{
		&row.Uuid,
		&row.Url,
		&row.ChannelPublish.Exchange,
		&row.ChannelPublish.RoutingKey,
		&row.ChannelPublish.Mandatory,
		&row.ChannelPublish.Immediate,
		&row.Publishing.MessageHeaders,
		&row.Publishing.MessageContentType,
		&row.Publishing.MessageContentEncoding,
		&row.Publishing.MessageDeliveryMode,
		&row.Publishing.MessagePriority,
		&row.Publishing.MessageCorrelationId,
		&row.Publishing.MessageReplyTo,
		&row.Publishing.MessageExpiration,
		&row.Publishing.MessageMessageId,
		&row.Publishing.MessageTimestamp,
		&row.Publishing.MessageType,
		&row.Publishing.MessageUserId,
		&row.Publishing.MessageAppId,
	}
}
 
func (row *RabbitMqConfig) Ptrs() []interface{} {
	return []interface{}{
		&row.Url,
		&row.ChannelPublish.Exchange,
		&row.ChannelPublish.RoutingKey,
		&row.ChannelPublish.Mandatory,
		&row.ChannelPublish.Immediate,
		&row.Publishing.MessageHeaders,
		&row.Publishing.MessageContentType,
		&row.Publishing.MessageContentEncoding,
		&row.Publishing.MessageDeliveryMode,
		&row.Publishing.MessagePriority,
		&row.Publishing.MessageCorrelationId,
		&row.Publishing.MessageReplyTo,
		&row.Publishing.MessageExpiration,
		&row.Publishing.MessageMessageId,
		&row.Publishing.MessageTimestamp,
		&row.Publishing.MessageType,
		&row.Publishing.MessageUserId,
		&row.Publishing.MessageAppId,
	}
}
 
func (row *NotifierSlackhook) Ptrs() []interface{} {
	return []interface{}{
		&row.Uuid,
		&row.Url,
		&row.RequestTimeout,
	}
}
 
func (row *SlackhookConfig) Ptrs() []interface{} {
	return []interface{}{
		&row.Url,
		&row.RequestTimeout,
	}
}
 
func (row *ChannelStatusOption_property) Ptrs() []interface{} {
	return []interface{}{
		&row.StatusMaxCount,
	}
}
 
func (row *ChannelStatusOption) Ptrs() []interface{} {
	return []interface{}{
		&row.Uuid,
		&row.StatusMaxCount,
	}
}
 
func (row *ChannelStatus) Ptrs() []interface{} {
	return []interface{}{
		&row.Uuid,
		&row.Created,
		&row.Message,
	}
}
 
func (row *Filter) Ptrs() []interface{} {
	return []interface{}{
		&row.Uuid,
		&row.FilterOp,
		&row.FilterKey,
		&row.FilterValue,
	}
}
 
func (row *Format_property) Ptrs() []interface{} {
	return []interface{}{
		&row.FormatType,
		&row.FormatData,
	}
}
 
func (row *Format) Ptrs() []interface{} {
	return []interface{}{
		&row.Uuid,
		&row.FormatType,
		&row.FormatData,
	}
}
