// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v3

import (
	"fmt"
	"strings"
)

const (
	// EventCategoryNaV is a EventCategory of type NaV.
	EventCategoryNaV EventCategory = iota
	// EventCategoryNonspecified is a EventCategory of type Nonspecified.
	EventCategoryNonspecified
	// EventCategoryClientAuthAccept is a EventCategory of type Client-Auth-Accept.
	EventCategoryClientAuthAccept
	// EventCategoryServicePollingOut is a EventCategory of type Service-Polling-Out.
	EventCategoryServicePollingOut
	// EventCategoryServicePollingIn is a EventCategory of type Service-Polling-In.
	EventCategoryServicePollingIn
)

const _EventCategoryName = "NaVnonspecifiedclient-auth-acceptservice-polling-outservice-polling-in"

var _EventCategoryNames = []string{
	_EventCategoryName[0:3],
	_EventCategoryName[3:15],
	_EventCategoryName[15:33],
	_EventCategoryName[33:52],
	_EventCategoryName[52:70],
}

// EventCategoryNames returns a list of possible string values of EventCategory.
func EventCategoryNames() []string {
	tmp := make([]string, len(_EventCategoryNames))
	copy(tmp, _EventCategoryNames)
	return tmp
}

var _EventCategoryMap = map[EventCategory]string{
	EventCategoryNaV:               _EventCategoryName[0:3],
	EventCategoryNonspecified:      _EventCategoryName[3:15],
	EventCategoryClientAuthAccept:  _EventCategoryName[15:33],
	EventCategoryServicePollingOut: _EventCategoryName[33:52],
	EventCategoryServicePollingIn:  _EventCategoryName[52:70],
}

// String implements the Stringer interface.
func (x EventCategory) String() string {
	if str, ok := _EventCategoryMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EventCategory(%d)", x)
}

var _EventCategoryValue = map[string]EventCategory{
	_EventCategoryName[0:3]:                    EventCategoryNaV,
	strings.ToLower(_EventCategoryName[0:3]):   EventCategoryNaV,
	_EventCategoryName[3:15]:                   EventCategoryNonspecified,
	strings.ToLower(_EventCategoryName[3:15]):  EventCategoryNonspecified,
	_EventCategoryName[15:33]:                  EventCategoryClientAuthAccept,
	strings.ToLower(_EventCategoryName[15:33]): EventCategoryClientAuthAccept,
	_EventCategoryName[33:52]:                  EventCategoryServicePollingOut,
	strings.ToLower(_EventCategoryName[33:52]): EventCategoryServicePollingOut,
	_EventCategoryName[52:70]:                  EventCategoryServicePollingIn,
	strings.ToLower(_EventCategoryName[52:70]): EventCategoryServicePollingIn,
}

// ParseEventCategory attempts to convert a string to a EventCategory.
func ParseEventCategory(name string) (EventCategory, error) {
	if x, ok := _EventCategoryValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _EventCategoryValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return EventCategory(0), fmt.Errorf("%s is not a valid EventCategory, try [%s]", name, strings.Join(_EventCategoryNames, ", "))
}
