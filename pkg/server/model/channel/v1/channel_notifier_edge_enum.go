// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1

import (
	"fmt"
	"strings"
)

const (
	// NotifierTypeConsole is a NotifierType of type Console.
	NotifierTypeConsole NotifierType = iota
	// NotifierTypeWebhook is a NotifierType of type Webhook.
	NotifierTypeWebhook
	// NotifierTypeRabbitmq is a NotifierType of type Rabbitmq.
	NotifierTypeRabbitmq
)

const _NotifierTypeName = "consolewebhookrabbitmq"

var _NotifierTypeNames = []string{
	_NotifierTypeName[0:7],
	_NotifierTypeName[7:14],
	_NotifierTypeName[14:22],
}

// NotifierTypeNames returns a list of possible string values of NotifierType.
func NotifierTypeNames() []string {
	tmp := make([]string, len(_NotifierTypeNames))
	copy(tmp, _NotifierTypeNames)
	return tmp
}

var _NotifierTypeMap = map[NotifierType]string{
	NotifierTypeConsole:  _NotifierTypeName[0:7],
	NotifierTypeWebhook:  _NotifierTypeName[7:14],
	NotifierTypeRabbitmq: _NotifierTypeName[14:22],
}

// String implements the Stringer interface.
func (x NotifierType) String() string {
	if str, ok := _NotifierTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("NotifierType(%d)", x)
}

var _NotifierTypeValue = map[string]NotifierType{
	_NotifierTypeName[0:7]:                    NotifierTypeConsole,
	strings.ToLower(_NotifierTypeName[0:7]):   NotifierTypeConsole,
	_NotifierTypeName[7:14]:                   NotifierTypeWebhook,
	strings.ToLower(_NotifierTypeName[7:14]):  NotifierTypeWebhook,
	_NotifierTypeName[14:22]:                  NotifierTypeRabbitmq,
	strings.ToLower(_NotifierTypeName[14:22]): NotifierTypeRabbitmq,
}

// ParseNotifierType attempts to convert a string to a NotifierType.
func ParseNotifierType(name string) (NotifierType, error) {
	if x, ok := _NotifierTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _NotifierTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return NotifierType(0), fmt.Errorf("%s is not a valid NotifierType, try [%s]", name, strings.Join(_NotifierTypeNames, ", "))
}
