// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v2

import (
	"fmt"
	"strings"
)

const (
	// OriginNone is a Origin of type None.
	OriginNone Origin = iota
	// OriginPredefined is a Origin of type Predefined.
	OriginPredefined
	// OriginSystem is a Origin of type System.
	OriginSystem
)

const _OriginName = "nonepredefinedsystem"

var _OriginNames = []string{
	_OriginName[0:4],
	_OriginName[4:14],
	_OriginName[14:20],
}

// OriginNames returns a list of possible string values of Origin.
func OriginNames() []string {
	tmp := make([]string, len(_OriginNames))
	copy(tmp, _OriginNames)
	return tmp
}

var _OriginMap = map[Origin]string{
	OriginNone:       _OriginName[0:4],
	OriginPredefined: _OriginName[4:14],
	OriginSystem:     _OriginName[14:20],
}

// String implements the Stringer interface.
func (x Origin) String() string {
	if str, ok := _OriginMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Origin(%d)", x)
}

var _OriginValue = map[string]Origin{
	_OriginName[0:4]:                    OriginNone,
	strings.ToLower(_OriginName[0:4]):   OriginNone,
	_OriginName[4:14]:                   OriginPredefined,
	strings.ToLower(_OriginName[4:14]):  OriginPredefined,
	_OriginName[14:20]:                  OriginSystem,
	strings.ToLower(_OriginName[14:20]): OriginSystem,
}

// ParseOrigin attempts to convert a string to a Origin.
func ParseOrigin(name string) (Origin, error) {
	if x, ok := _OriginValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _OriginValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Origin(0), fmt.Errorf("%s is not a valid Origin, try [%s]", name, strings.Join(_OriginNames, ", "))
}
