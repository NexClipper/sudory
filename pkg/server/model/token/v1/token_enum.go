// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1

import (
	"fmt"
	"strings"
)

const (
	// TokenUserKindCluster is a TokenUserKind of type Cluster.
	TokenUserKindCluster TokenUserKind = iota
)

const _TokenUserKindName = "cluster"

var _TokenUserKindNames = []string{
	_TokenUserKindName[0:7],
}

// TokenUserKindNames returns a list of possible string values of TokenUserKind.
func TokenUserKindNames() []string {
	tmp := make([]string, len(_TokenUserKindNames))
	copy(tmp, _TokenUserKindNames)
	return tmp
}

var _TokenUserKindMap = map[TokenUserKind]string{
	TokenUserKindCluster: _TokenUserKindName[0:7],
}

// String implements the Stringer interface.
func (x TokenUserKind) String() string {
	if str, ok := _TokenUserKindMap[x]; ok {
		return str
	}
	return fmt.Sprintf("TokenUserKind(%d)", x)
}

var _TokenUserKindValue = map[string]TokenUserKind{
	_TokenUserKindName[0:7]:                  TokenUserKindCluster,
	strings.ToLower(_TokenUserKindName[0:7]): TokenUserKindCluster,
}

// ParseTokenUserKind attempts to convert a string to a TokenUserKind.
func ParseTokenUserKind(name string) (TokenUserKind, error) {
	if x, ok := _TokenUserKindValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _TokenUserKindValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return TokenUserKind(0), fmt.Errorf("%s is not a valid TokenUserKind, try [%s]", name, strings.Join(_TokenUserKindNames, ", "))
}
