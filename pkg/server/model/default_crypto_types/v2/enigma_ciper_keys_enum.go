// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v2

import (
	"fmt"
	"strings"
)

const (
	// CiperKeySudoryDefaultCrypto is a CiperKey of type Sudory.Default.Crypto.
	CiperKeySudoryDefaultCrypto CiperKey = iota
)

const _CiperKeyName = "sudory.default.crypto"

var _CiperKeyNames = []string{
	_CiperKeyName[0:21],
}

// CiperKeyNames returns a list of possible string values of CiperKey.
func CiperKeyNames() []string {
	tmp := make([]string, len(_CiperKeyNames))
	copy(tmp, _CiperKeyNames)
	return tmp
}

var _CiperKeyMap = map[CiperKey]string{
	CiperKeySudoryDefaultCrypto: _CiperKeyName[0:21],
}

// String implements the Stringer interface.
func (x CiperKey) String() string {
	if str, ok := _CiperKeyMap[x]; ok {
		return str
	}
	return fmt.Sprintf("CiperKey(%d)", x)
}

var _CiperKeyValue = map[string]CiperKey{
	_CiperKeyName[0:21]: CiperKeySudoryDefaultCrypto,
}

// ParseCiperKey attempts to convert a string to a CiperKey.
func ParseCiperKey(name string) (CiperKey, error) {
	if x, ok := _CiperKeyValue[name]; ok {
		return x, nil
	}
	return CiperKey(0), fmt.Errorf("%s is not a valid CiperKey, try [%s]", name, strings.Join(_CiperKeyNames, ", "))
}
