// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package service

import (
	"fmt"
	"strings"
)

const (
	// PriorityLow is a Priority of type Low.
	PriorityLow Priority = iota
	// PriorityMiddle is a Priority of type Middle.
	PriorityMiddle
	// PriorityHigh is a Priority of type High.
	PriorityHigh
)

var ErrInvalidPriority = fmt.Errorf("not a valid Priority, try [%s]", strings.Join(_PriorityNames, ", "))

const _PriorityName = "lowmiddlehigh"

var _PriorityNames = []string{
	_PriorityName[0:3],
	_PriorityName[3:9],
	_PriorityName[9:13],
}

// PriorityNames returns a list of possible string values of Priority.
func PriorityNames() []string {
	tmp := make([]string, len(_PriorityNames))
	copy(tmp, _PriorityNames)
	return tmp
}

var _PriorityMap = map[Priority]string{
	PriorityLow:    _PriorityName[0:3],
	PriorityMiddle: _PriorityName[3:9],
	PriorityHigh:   _PriorityName[9:13],
}

// String implements the Stringer interface.
func (x Priority) String() string {
	if str, ok := _PriorityMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Priority(%d)", x)
}

var _PriorityValue = map[string]Priority{
	_PriorityName[0:3]:                   PriorityLow,
	strings.ToLower(_PriorityName[0:3]):  PriorityLow,
	_PriorityName[3:9]:                   PriorityMiddle,
	strings.ToLower(_PriorityName[3:9]):  PriorityMiddle,
	_PriorityName[9:13]:                  PriorityHigh,
	strings.ToLower(_PriorityName[9:13]): PriorityHigh,
}

// ParsePriority attempts to convert a string to a Priority.
func ParsePriority(name string) (Priority, error) {
	if x, ok := _PriorityValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _PriorityValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Priority(0), fmt.Errorf("%s is %w", name, ErrInvalidPriority)
}

const (
	// ResultSaveTypeNone is a ResultSaveType of type None.
	ResultSaveTypeNone ResultSaveType = iota
	// ResultSaveTypeDatabase is a ResultSaveType of type Database.
	ResultSaveTypeDatabase
	// ResultSaveTypeDigitalOceanSpaces is a ResultSaveType of type DigitalOcean:Spaces.
	ResultSaveTypeDigitalOceanSpaces
)

var ErrInvalidResultSaveType = fmt.Errorf("not a valid ResultSaveType, try [%s]", strings.Join(_ResultSaveTypeNames, ", "))

const _ResultSaveTypeName = "nonedatabaseDigitalOcean:Spaces"

var _ResultSaveTypeNames = []string{
	_ResultSaveTypeName[0:4],
	_ResultSaveTypeName[4:12],
	_ResultSaveTypeName[12:31],
}

// ResultSaveTypeNames returns a list of possible string values of ResultSaveType.
func ResultSaveTypeNames() []string {
	tmp := make([]string, len(_ResultSaveTypeNames))
	copy(tmp, _ResultSaveTypeNames)
	return tmp
}

var _ResultSaveTypeMap = map[ResultSaveType]string{
	ResultSaveTypeNone:               _ResultSaveTypeName[0:4],
	ResultSaveTypeDatabase:           _ResultSaveTypeName[4:12],
	ResultSaveTypeDigitalOceanSpaces: _ResultSaveTypeName[12:31],
}

// String implements the Stringer interface.
func (x ResultSaveType) String() string {
	if str, ok := _ResultSaveTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ResultSaveType(%d)", x)
}

var _ResultSaveTypeValue = map[string]ResultSaveType{
	_ResultSaveTypeName[0:4]:                    ResultSaveTypeNone,
	strings.ToLower(_ResultSaveTypeName[0:4]):   ResultSaveTypeNone,
	_ResultSaveTypeName[4:12]:                   ResultSaveTypeDatabase,
	strings.ToLower(_ResultSaveTypeName[4:12]):  ResultSaveTypeDatabase,
	_ResultSaveTypeName[12:31]:                  ResultSaveTypeDigitalOceanSpaces,
	strings.ToLower(_ResultSaveTypeName[12:31]): ResultSaveTypeDigitalOceanSpaces,
}

// ParseResultSaveType attempts to convert a string to a ResultSaveType.
func ParseResultSaveType(name string) (ResultSaveType, error) {
	if x, ok := _ResultSaveTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _ResultSaveTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return ResultSaveType(0), fmt.Errorf("%s is %w", name, ErrInvalidResultSaveType)
}

const (
	// StepStatusRegist is a StepStatus of type Regist.
	StepStatusRegist StepStatus = iota
	// StepStatusSent is a StepStatus of type Sent.
	StepStatusSent
	// StepStatusProcessing is a StepStatus of type Processing.
	StepStatusProcessing
	// StepStatusSucceeded is a StepStatus of type Succeeded.
	StepStatusSucceeded StepStatus = iota + 1
	// StepStatusFailed is a StepStatus of type Failed.
	StepStatusFailed StepStatus = iota + 4
)

var ErrInvalidStepStatus = fmt.Errorf("not a valid StepStatus, try [%s]", strings.Join(_StepStatusNames, ", "))

const _StepStatusName = "registsentprocessingsucceededfailed"

var _StepStatusNames = []string{
	_StepStatusName[0:6],
	_StepStatusName[6:10],
	_StepStatusName[10:20],
	_StepStatusName[20:29],
	_StepStatusName[29:35],
}

// StepStatusNames returns a list of possible string values of StepStatus.
func StepStatusNames() []string {
	tmp := make([]string, len(_StepStatusNames))
	copy(tmp, _StepStatusNames)
	return tmp
}

var _StepStatusMap = map[StepStatus]string{
	StepStatusRegist:     _StepStatusName[0:6],
	StepStatusSent:       _StepStatusName[6:10],
	StepStatusProcessing: _StepStatusName[10:20],
	StepStatusSucceeded:  _StepStatusName[20:29],
	StepStatusFailed:     _StepStatusName[29:35],
}

// String implements the Stringer interface.
func (x StepStatus) String() string {
	if str, ok := _StepStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("StepStatus(%d)", x)
}

var _StepStatusValue = map[string]StepStatus{
	_StepStatusName[0:6]:                    StepStatusRegist,
	strings.ToLower(_StepStatusName[0:6]):   StepStatusRegist,
	_StepStatusName[6:10]:                   StepStatusSent,
	strings.ToLower(_StepStatusName[6:10]):  StepStatusSent,
	_StepStatusName[10:20]:                  StepStatusProcessing,
	strings.ToLower(_StepStatusName[10:20]): StepStatusProcessing,
	_StepStatusName[20:29]:                  StepStatusSucceeded,
	strings.ToLower(_StepStatusName[20:29]): StepStatusSucceeded,
	_StepStatusName[29:35]:                  StepStatusFailed,
	strings.ToLower(_StepStatusName[29:35]): StepStatusFailed,
}

// ParseStepStatus attempts to convert a string to a StepStatus.
func ParseStepStatus(name string) (StepStatus, error) {
	if x, ok := _StepStatusValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _StepStatusValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return StepStatus(0), fmt.Errorf("%s is %w", name, ErrInvalidStepStatus)
}
