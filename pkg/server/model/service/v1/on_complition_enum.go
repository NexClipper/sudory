// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1

import (
	"fmt"
	"strings"
)

const (
	// OnComplitionNone is a OnComplition of type None.
	OnComplitionNone OnComplition = iota
	// OnComplitionRemove is a OnComplition of type Remove.
	OnComplitionRemove
)

const _OnComplitionName = "noneremove"

var _OnComplitionNames = []string{
	_OnComplitionName[0:4],
	_OnComplitionName[4:10],
}

// OnComplitionNames returns a list of possible string values of OnComplition.
func OnComplitionNames() []string {
	tmp := make([]string, len(_OnComplitionNames))
	copy(tmp, _OnComplitionNames)
	return tmp
}

var _OnComplitionMap = map[OnComplition]string{
	OnComplitionNone:   _OnComplitionName[0:4],
	OnComplitionRemove: _OnComplitionName[4:10],
}

// String implements the Stringer interface.
func (x OnComplition) String() string {
	if str, ok := _OnComplitionMap[x]; ok {
		return str
	}
	return fmt.Sprintf("OnComplition(%d)", x)
}

var _OnComplitionValue = map[string]OnComplition{
	_OnComplitionName[0:4]:                   OnComplitionNone,
	strings.ToLower(_OnComplitionName[0:4]):  OnComplitionNone,
	_OnComplitionName[4:10]:                  OnComplitionRemove,
	strings.ToLower(_OnComplitionName[4:10]): OnComplitionRemove,
}

// ParseOnComplition attempts to convert a string to a OnComplition.
func ParseOnComplition(name string) (OnComplition, error) {
	if x, ok := _OnComplitionValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _OnComplitionValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return OnComplition(0), fmt.Errorf("%s is not a valid OnComplition, try [%s]", name, strings.Join(_OnComplitionNames, ", "))
}
