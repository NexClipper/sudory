// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1

import (
	"fmt"
	"strings"
)

const (
	// OnCompletionNone is a OnCompletion of type None.
	OnCompletionNone OnCompletion = iota
	// OnCompletionRemove is a OnCompletion of type Remove.
	OnCompletionRemove
)

const _OnCompletionName = "noneremove"

var _OnCompletionNames = []string{
	_OnCompletionName[0:4],
	_OnCompletionName[4:10],
}

// OnCompletionNames returns a list of possible string values of OnCompletion.
func OnCompletionNames() []string {
	tmp := make([]string, len(_OnCompletionNames))
	copy(tmp, _OnCompletionNames)
	return tmp
}

var _OnCompletionMap = map[OnCompletion]string{
	OnCompletionNone:   _OnCompletionName[0:4],
	OnCompletionRemove: _OnCompletionName[4:10],
}

// String implements the Stringer interface.
func (x OnCompletion) String() string {
	if str, ok := _OnCompletionMap[x]; ok {
		return str
	}
	return fmt.Sprintf("OnCompletion(%d)", x)
}

var _OnCompletionValue = map[string]OnCompletion{
	_OnCompletionName[0:4]:                   OnCompletionNone,
	strings.ToLower(_OnCompletionName[0:4]):  OnCompletionNone,
	_OnCompletionName[4:10]:                  OnCompletionRemove,
	strings.ToLower(_OnCompletionName[4:10]): OnCompletionRemove,
}

// ParseOnCompletion attempts to convert a string to a OnCompletion.
func ParseOnCompletion(name string) (OnCompletion, error) {
	if x, ok := _OnCompletionValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _OnCompletionValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return OnCompletion(0), fmt.Errorf("%s is not a valid OnCompletion, try [%s]", name, strings.Join(_OnCompletionNames, ", "))
}
