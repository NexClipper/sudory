// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1

import (
	"fmt"
	"strings"
)

const (
	// ContentTypeApplicationJson is a ContentType of type Application/Json.
	ContentTypeApplicationJson ContentType = iota
	// ContentTypeApplicationXml is a ContentType of type Application/Xml.
	ContentTypeApplicationXml
)

const _ContentTypeName = "application/jsonapplication/xml"

var _ContentTypeNames = []string{
	_ContentTypeName[0:16],
	_ContentTypeName[16:31],
}

// ContentTypeNames returns a list of possible string values of ContentType.
func ContentTypeNames() []string {
	tmp := make([]string, len(_ContentTypeNames))
	copy(tmp, _ContentTypeNames)
	return tmp
}

var _ContentTypeMap = map[ContentType]string{
	ContentTypeApplicationJson: _ContentTypeName[0:16],
	ContentTypeApplicationXml:  _ContentTypeName[16:31],
}

// String implements the Stringer interface.
func (x ContentType) String() string {
	if str, ok := _ContentTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ContentType(%d)", x)
}

var _ContentTypeValue = map[string]ContentType{
	_ContentTypeName[0:16]:                   ContentTypeApplicationJson,
	strings.ToLower(_ContentTypeName[0:16]):  ContentTypeApplicationJson,
	_ContentTypeName[16:31]:                  ContentTypeApplicationXml,
	strings.ToLower(_ContentTypeName[16:31]): ContentTypeApplicationXml,
}

// ParseContentType attempts to convert a string to a ContentType.
func ParseContentType(name string) (ContentType, error) {
	if x, ok := _ContentTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _ContentTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return ContentType(0), fmt.Errorf("%s is not a valid ContentType, try [%s]", name, strings.Join(_ContentTypeNames, ", "))
}
