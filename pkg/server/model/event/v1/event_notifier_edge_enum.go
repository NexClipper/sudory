// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package v1

import (
	"fmt"
	"strings"
)

const (
	// EventNotifierTypeConsole is a EventNotifierType of type Console.
	EventNotifierTypeConsole EventNotifierType = iota
	// EventNotifierTypeWebhook is a EventNotifierType of type Webhook.
	EventNotifierTypeWebhook
	// EventNotifierTypeRabbitmq is a EventNotifierType of type Rabbitmq.
	EventNotifierTypeRabbitmq
)

const _EventNotifierTypeName = "consolewebhookrabbitmq"

var _EventNotifierTypeNames = []string{
	_EventNotifierTypeName[0:7],
	_EventNotifierTypeName[7:14],
	_EventNotifierTypeName[14:22],
}

// EventNotifierTypeNames returns a list of possible string values of EventNotifierType.
func EventNotifierTypeNames() []string {
	tmp := make([]string, len(_EventNotifierTypeNames))
	copy(tmp, _EventNotifierTypeNames)
	return tmp
}

var _EventNotifierTypeMap = map[EventNotifierType]string{
	EventNotifierTypeConsole:  _EventNotifierTypeName[0:7],
	EventNotifierTypeWebhook:  _EventNotifierTypeName[7:14],
	EventNotifierTypeRabbitmq: _EventNotifierTypeName[14:22],
}

// String implements the Stringer interface.
func (x EventNotifierType) String() string {
	if str, ok := _EventNotifierTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EventNotifierType(%d)", x)
}

var _EventNotifierTypeValue = map[string]EventNotifierType{
	_EventNotifierTypeName[0:7]:                    EventNotifierTypeConsole,
	strings.ToLower(_EventNotifierTypeName[0:7]):   EventNotifierTypeConsole,
	_EventNotifierTypeName[7:14]:                   EventNotifierTypeWebhook,
	strings.ToLower(_EventNotifierTypeName[7:14]):  EventNotifierTypeWebhook,
	_EventNotifierTypeName[14:22]:                  EventNotifierTypeRabbitmq,
	strings.ToLower(_EventNotifierTypeName[14:22]): EventNotifierTypeRabbitmq,
}

// ParseEventNotifierType attempts to convert a string to a EventNotifierType.
func ParseEventNotifierType(name string) (EventNotifierType, error) {
	if x, ok := _EventNotifierTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _EventNotifierTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return EventNotifierType(0), fmt.Errorf("%s is not a valid EventNotifierType, try [%s]", name, strings.Join(_EventNotifierTypeNames, ", "))
}
