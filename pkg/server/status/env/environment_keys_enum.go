// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package env

import (
	"fmt"
	"strings"
)

const (
	// EnvBearerTokenSignatureSecret is a Env of type Bearer-Token-Signature-Secret.
	EnvBearerTokenSignatureSecret Env = iota
	// EnvBearerTokenExpirationTime is a Env of type Bearer-Token-Expiration-Time.
	EnvBearerTokenExpirationTime
	// EnvClientSessionSignatureSecret is a Env of type Client-Session-Signature-Secret.
	EnvClientSessionSignatureSecret
	// EnvClientSessionExpirationTime is a Env of type Client-Session-Expiration-Time.
	EnvClientSessionExpirationTime
	// EnvClientConfigPollInterval is a Env of type Client-Config-Poll-Interval.
	EnvClientConfigPollInterval
	// EnvClientConfigLoglevel is a Env of type Client-Config-Loglevel.
	EnvClientConfigLoglevel
)

const _EnvName = "bearer-token-signature-secretbearer-token-expiration-timeclient-session-signature-secretclient-session-expiration-timeclient-config-poll-intervalclient-config-loglevel"

var _EnvNames = []string{
	_EnvName[0:29],
	_EnvName[29:57],
	_EnvName[57:88],
	_EnvName[88:118],
	_EnvName[118:145],
	_EnvName[145:167],
}

// EnvNames returns a list of possible string values of Env.
func EnvNames() []string {
	tmp := make([]string, len(_EnvNames))
	copy(tmp, _EnvNames)
	return tmp
}

var _EnvMap = map[Env]string{
	EnvBearerTokenSignatureSecret:   _EnvName[0:29],
	EnvBearerTokenExpirationTime:    _EnvName[29:57],
	EnvClientSessionSignatureSecret: _EnvName[57:88],
	EnvClientSessionExpirationTime:  _EnvName[88:118],
	EnvClientConfigPollInterval:     _EnvName[118:145],
	EnvClientConfigLoglevel:         _EnvName[145:167],
}

// String implements the Stringer interface.
func (x Env) String() string {
	if str, ok := _EnvMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Env(%d)", x)
}

var _EnvValue = map[string]Env{
	_EnvName[0:29]:                     EnvBearerTokenSignatureSecret,
	strings.ToLower(_EnvName[0:29]):    EnvBearerTokenSignatureSecret,
	_EnvName[29:57]:                    EnvBearerTokenExpirationTime,
	strings.ToLower(_EnvName[29:57]):   EnvBearerTokenExpirationTime,
	_EnvName[57:88]:                    EnvClientSessionSignatureSecret,
	strings.ToLower(_EnvName[57:88]):   EnvClientSessionSignatureSecret,
	_EnvName[88:118]:                   EnvClientSessionExpirationTime,
	strings.ToLower(_EnvName[88:118]):  EnvClientSessionExpirationTime,
	_EnvName[118:145]:                  EnvClientConfigPollInterval,
	strings.ToLower(_EnvName[118:145]): EnvClientConfigPollInterval,
	_EnvName[145:167]:                  EnvClientConfigLoglevel,
	strings.ToLower(_EnvName[145:167]): EnvClientConfigLoglevel,
}

// ParseEnv attempts to convert a string to a Env.
func ParseEnv(name string) (Env, error) {
	if x, ok := _EnvValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _EnvValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Env(0), fmt.Errorf("%s is not a valid Env, try [%s]", name, strings.Join(_EnvNames, ", "))
}
