// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enigma

import (
	"fmt"
	"strings"
)

const (
	// StrConvPlain is a StrConv of type Plain.
	StrConvPlain StrConv = iota
	// StrConvBase64 is a StrConv of type Base64.
	StrConvBase64
	// StrConvHex is a StrConv of type Hex.
	StrConvHex
)

const _StrConvName = "plainbase64hex"

var _StrConvNames = []string{
	_StrConvName[0:5],
	_StrConvName[5:11],
	_StrConvName[11:14],
}

// StrConvNames returns a list of possible string values of StrConv.
func StrConvNames() []string {
	tmp := make([]string, len(_StrConvNames))
	copy(tmp, _StrConvNames)
	return tmp
}

var _StrConvMap = map[StrConv]string{
	StrConvPlain:  _StrConvName[0:5],
	StrConvBase64: _StrConvName[5:11],
	StrConvHex:    _StrConvName[11:14],
}

// String implements the Stringer interface.
func (x StrConv) String() string {
	if str, ok := _StrConvMap[x]; ok {
		return str
	}
	return fmt.Sprintf("StrConv(%d)", x)
}

var _StrConvValue = map[string]StrConv{
	_StrConvName[0:5]:                    StrConvPlain,
	strings.ToLower(_StrConvName[0:5]):   StrConvPlain,
	_StrConvName[5:11]:                   StrConvBase64,
	strings.ToLower(_StrConvName[5:11]):  StrConvBase64,
	_StrConvName[11:14]:                  StrConvHex,
	strings.ToLower(_StrConvName[11:14]): StrConvHex,
}

// ParseStrConv attempts to convert a string to a StrConv.
func ParseStrConv(name string) (StrConv, error) {
	if x, ok := _StrConvValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _StrConvValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return StrConv(0), fmt.Errorf("%s is not a valid StrConv, try [%s]", name, strings.Join(_StrConvNames, ", "))
}
