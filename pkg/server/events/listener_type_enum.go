// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package events

import (
	"fmt"
	"strings"
)

const (
	// ListenerTypeWebhook is a ListenerType of type Webhook.
	ListenerTypeWebhook ListenerType = iota
	// ListenerTypeFile is a ListenerType of type File.
	ListenerTypeFile
)

const _ListenerTypeName = "webhookfile"

var _ListenerTypeNames = []string{
	_ListenerTypeName[0:7],
	_ListenerTypeName[7:11],
}

// ListenerTypeNames returns a list of possible string values of ListenerType.
func ListenerTypeNames() []string {
	tmp := make([]string, len(_ListenerTypeNames))
	copy(tmp, _ListenerTypeNames)
	return tmp
}

var _ListenerTypeMap = map[ListenerType]string{
	ListenerTypeWebhook: _ListenerTypeName[0:7],
	ListenerTypeFile:    _ListenerTypeName[7:11],
}

// String implements the Stringer interface.
func (x ListenerType) String() string {
	if str, ok := _ListenerTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ListenerType(%d)", x)
}

var _ListenerTypeValue = map[string]ListenerType{
	_ListenerTypeName[0:7]:                   ListenerTypeWebhook,
	strings.ToLower(_ListenerTypeName[0:7]):  ListenerTypeWebhook,
	_ListenerTypeName[7:11]:                  ListenerTypeFile,
	strings.ToLower(_ListenerTypeName[7:11]): ListenerTypeFile,
}

// ParseListenerType attempts to convert a string to a ListenerType.
func ParseListenerType(name string) (ListenerType, error) {
	if x, ok := _ListenerTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _ListenerTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return ListenerType(0), fmt.Errorf("%s is not a valid ListenerType, try [%s]", name, strings.Join(_ListenerTypeNames, ", "))
}
